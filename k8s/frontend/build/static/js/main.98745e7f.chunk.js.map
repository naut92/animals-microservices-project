{"version":3,"sources":["AppNavbar.js","globalPath.js","Home.js","CountyList.js","CustomerList.js","AnimalsList.js","AnimalEdit.js","App.js","serviceWorker.js","index.js"],"names":["AppNavbar","props","_this","Object","_Users_echo_projects_animals_animals_app_client_app_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","_Users_echo_projects_animals_animals_app_client_app_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","_Users_echo_projects_animals_animals_app_client_app_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","state","isOpen","toggle","bind","_Users_echo_projects_animals_animals_app_client_app_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_4__","setState","react__WEBPACK_IMPORTED_MODULE_6___default","a","createElement","reactstrap__WEBPACK_IMPORTED_MODULE_7__","color","dark","expand","tag","Link","to","onClick","navbar","className","href","Component","global","path","Home","isLoading","cities","fetch","response","json","body","_this$state","react__WEBPACK_IMPORTED_MODULE_7___default","_AppNavbar__WEBPACK_IMPORTED_MODULE_9__","reactstrap__WEBPACK_IMPORTED_MODULE_11__","fluid","map","city","key","id","react_router_dom__WEBPACK_IMPORTED_MODULE_10__","name","CountyList","_Users_echo_projects_animals_animals_app_client_app_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__","_Users_echo_projects_animals_animals_app_client_app_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__","_Users_echo_projects_animals_animals_app_client_app_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__","emptyCity","countyById","concat","match","params","reactstrap__WEBPACK_IMPORTED_MODULE_8__","keys","county","withRouter","CustomerList","emptyCounty","email","customerById","customer","AnimalsList","_Users_echo_projects_animals_animals_app_client_app_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__","_Users_echo_projects_animals_animals_app_client_app_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5__","_Users_echo_projects_animals_animals_app_client_app_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6__","emptyAnimal","animalname","typesanimal","dateborn","sex","animals","remove","_Users_echo_projects_animals_animals_app_client_app_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_7__","customerId","method","headers","Accept","Content-Type","then","updatedAnimals","_Users_echo_projects_animals_animals_app_client_app_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__","_this2","filter","i","_this3","react__WEBPACK_IMPORTED_MODULE_9___default","animalsList","animal","style","whiteSpace","reactstrap__WEBPACK_IMPORTED_MODULE_10__","size","_AppNavbar__WEBPACK_IMPORTED_MODULE_11__","width","AnimalEdit","handleChange","handleSubmit","animalId","location","pathname","substring","lastIndexOf","length","event","target","value","_Users_echo_projects_animals_animals_app_client_app_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","console","log","preventDefault","customer_Id","JSON","stringify","history","push","title","onSubmit","for","type","onChange","autoComplete","selected","App","react_default","BrowserRouter","Switch","Route","exact","component","Boolean","window","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.98745e7f.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Collapse, Nav, Navbar, NavbarBrand, NavbarToggler, NavItem, NavLink } from 'reactstrap';\nimport { Link } from 'react-router-dom';\n\nexport default class AppNavbar extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {isOpen: false};\n        this.toggle = this.toggle.bind(this);\n    }\n\n    toggle() {\n        this.setState({\n            isOpen: !this.state.isOpen\n        });\n    }\n\n    render() {\n        return <Navbar color=\"dark\" dark expand=\"md\">\n            <NavbarBrand tag={Link} to=\"/\">Home</NavbarBrand>\n            <NavbarToggler onClick={this.toggle}/>\n            <Collapse isOpen={this.state.isOpen} navbar>\n                <Nav className=\"ml-auto\" navbar>\n                    <NavItem>\n                        <NavLink href=\"https://github.com/naut92/animals_app\">GitHub</NavLink>\n                    </NavItem>\n                </Nav>\n            </Collapse>\n        </Navbar>;\n    }\n}","//только для развертывания в docker-compose, K8s:\nglobal.path = 'http://localhost:8064';\n//без докера:\n//global.path = 'http://localhost:8081';\n//global.path = 'http://localhost:8099';","import React, { Component } from 'react';\nimport './App.css';\nimport AppNavbar from './AppNavbar';\nimport { Link } from 'react-router-dom';\nimport { Button, Container } from 'reactstrap';\nimport './globalPath.js';\n\nclass Home extends Component {\n    state = {\n        isLoading: true,\n        cities: []\n    };\n\n    async componentDidMount() {\n        const response = await fetch(global.path + '/city-service/cities');\n        //const response = await fetch(global.path + '/cities');\n        const body = await response.json();\n        this.setState({ cities: body, isLoading: false });\n    }\n\n    render() {\n        const {cities, isLoading} = this.state;\n\n        if (isLoading) {\n            return <p>Loading...</p>;\n        }\n        return (\n            <div>\n                <AppNavbar/>\n                <Container fluid>\n                    {/*<Button color=\"link\"><Link to=\"/customers\">Manage animals</Link></Button>*/}\n                    <h2>Cities:</h2>\n                    {cities.map(city =>\n                            <div key={city.id}>\n                                <Button color=\"link\"><Link to={\"/city/\" + city.id}>{city.name}</Link></Button>\n                            </div>\n                            )}\n                </Container>\n\n            </div>\n        );\n    }\n}\n\nexport default Home;","import React, { Component } from 'react';\nimport {Button, ButtonGroup, Container, Form, FormGroup, Input, Label, Table} from 'reactstrap';\nimport AppNavbar from './AppNavbar';\nimport { Link, withRouter} from 'react-router-dom';\nimport './globalPath.js';\n\nclass CountyList extends Component {\n    emptyCity = {\n        isLoading: true,\n        city: '',\n        name:'',\n        countyById: [],\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            city: this.emptyCity\n        };\n    }\n\n    async componentDidMount() {\n        const city = await (await fetch(global.path + `/city-service/city/${this.props.match.params.id}`)).json();\n        //const city = await (await fetch(global.path + `/cities/city/${this.props.match.params.id}`)).json();\n        this.setState({city: city});\n    }\n\n    render() {\n        const {city, isLoading} = this.state;\n\n        if (isLoading) {\n            return <p>Loading...</p>;\n        }\n        return (\n            <div>\n                <AppNavbar/>\n                <Container fluid>\n                    <h4>{city.name}</h4>\n                    <h2>Counties:</h2>\n                    {Object.keys(city.countyById).map(county =>\n                        <div key={city.countyById[county].id}>\n                            <Button color=\"link\"><Link to={\"/county/\" + city.countyById[county].id}>{city.countyById[county].name}</Link></Button>\n                        </div>\n                    )}\n                </Container>\n\n            </div>\n        );\n    }\n}\n\nexport default withRouter(CountyList);","import React, { Component } from 'react';\nimport {Button, ButtonGroup, Container, Form, FormGroup, Input, Label, Table} from 'reactstrap';\nimport AppNavbar from './AppNavbar';\nimport { Link, withRouter} from 'react-router-dom';\nimport './globalPath.js';\n\nclass CustomerList extends Component {\n    emptyCounty = {\n        isLoading: true,\n        county: '',\n        email:'',\n        customerById: [],\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            county: this.emptyCounty\n        };\n    }\n\n    async componentDidMount() {\n        const county = await (await fetch(global.path +`/counties-service/county/${this.props.match.params.id}`)).json();\n        //const county = await (await fetch(global.path +`/counties/county/${this.props.match.params.id}`)).json();\n        this.setState({county: county});\n    }\n\n    render() {\n        const {county, isLoading} = this.state;\n\n        if (isLoading) {\n            return <p>Loading...</p>;\n        }\n        return (\n            <div>\n                <AppNavbar/>\n                <Container fluid>\n                    <h4>{county.name}</h4>\n                    <h2>Customers:</h2>\n                    {Object.keys(county.customerById).map(customer =>\n                        <div key={county.customerById[customer].id}>\n                            <Button color=\"link\"><Link to={\"/customer/\" + county.customerById[customer].id}>{county.customerById[customer].email}</Link></Button>\n                        </div>\n                    )}\n                </Container>\n\n            </div>\n        );\n    }\n}\n\nexport default withRouter(CustomerList);","import React, { Component } from 'react';\nimport { Button, ButtonGroup, Container, Table } from 'reactstrap';\nimport AppNavbar from './AppNavbar';\nimport {Link, withRouter} from 'react-router-dom';\nimport './globalPath.js';\n\nclass AnimalsList extends Component {\n    emptyAnimal = {\n        animalname: '',\n        typesanimal: '',\n        dateborn: '',\n        sex: '',\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            animals: this.emptyAnimal\n        };\n        this.remove = this.remove.bind(this);\n    }\n\n    async componentDidMount() {\n        if (this.props.match.params.id !== 'new') {\n            const customer = await (await fetch(global.path +`/animals-app/customer/${this.props.match.params.id}`)).json();\n            //const customer = await (await fetch(global.path +`/customer/${this.props.match.params.id}`)).json();\n            this.setState({animals: customer});\n        }\n    }\n\n    async remove(id) {\n        const customerId= this.props.match.params.id;\n        await fetch(global.path + `/animals-app/customer/${customerId}/${id}`, {\n            method: 'DELETE',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            }\n        }).then(() => {\n            let updatedAnimals = [...this.state.animals].filter(i => i.id !== id);\n            this.setState({animals: updatedAnimals});\n        });\n    }\n\n    render() {\n        const {animals, isLoading} = this.state;\n        if (isLoading) {\n            return <p>Loading...</p>;\n        }\n        const customerId = this.props.match.params.id;\n        const animalsList = Object.keys(animals).map(animal => {\n            return <tr key={animals[animal].id}>\n                <td style={{whiteSpace: 'nowrap'}}> <p key={animals[animal].id}>\n                    {animals[animal].animalname}</p>\n                </td>\n                <td><div key={animals[animal].id}>\n                    {'вид животного: ' + animals[animal].typesanimal + ', '}<br/>\n                    {'дата рождения: ' + animals[animal].dateborn + ', '}<br/>\n                    {'пол: ' + animals[animal].sex}</div>\n                </td>\n\n                <td>\n                    <ButtonGroup>\n                        <Button size=\"sm\" color=\"primary\" tag={Link} to={\"/animal/\" + customerId + '/' + animals[animal].id}>Изменить</Button>\n                        <Button size=\"sm\" color=\"danger\" onClick={() => this.remove(animals[animal].id)}>Удалить</Button>\n                    </ButtonGroup>\n                </td>\n            </tr>\n        });\n\n            return (\n            <div>\n                <AppNavbar/>\n                <Container fluid>\n                    <div className=\"float-right\">\n                        <Button color=\"success\" tag={Link} to={\"/animal/new/\" + customerId}>Добавить животное</Button>\n                    </div>\n                    <h3>Мои животные:</h3>\n                    <Table className=\"mt-4\">\n                        <thead>\n                        <tr>\n                            <th width=\"20%\">Кличка</th>\n                            <th width=\"20%\">Характеристики</th>\n                            <th width=\"10%\">Действия</th>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        {animalsList}\n                        </tbody>\n                    </Table>\n                </Container>\n            </div>\n        );\n    }\n}\n\nexport default withRouter(AnimalsList);","import React, { Component } from 'react';\nimport { Button, Container, Form, FormGroup, Input, Label } from 'reactstrap';\nimport AppNavbar from './AppNavbar';\nimport { Link, withRouter} from 'react-router-dom';\nimport './globalPath.js';\n\nclass AnimalEdit extends Component {\n    emptyAnimal = {\n        animalname: '',\n        typesanimal: '',\n        sex: '',\n        dateborn: '',\n        customerId: ''\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            animal: this.emptyAnimal,\n        };\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    async componentDidMount() {\n        if (this.props.match.params.id !== 'new') {\n            const animalId = this.props.location.pathname.substring(this.props.location.pathname.lastIndexOf('/') + 1, this.props.location.pathname.length);\n            const animal = await (await fetch( global.path + `/animals-app/animal/:id/${animalId}`)).json();\n            //const animal = await (await fetch( global.path + `/animal/:id/${animalId}`)).json();\n            this.setState({animal: animal});\n        }\n    }\n\n    handleChange(event) {\n        const target = event.target;\n        const value = target.value;\n        const name = target.name;\n        let animal = {...this.state.animal};\n        animal[name] = value;\n        this.setState({animal});\n    }\n\n    async handleSubmit(event) {\n        console.log(event);\n        event.preventDefault();\n        const {animal} = this.state;\n        const customer_Id = this.props.location.pathname.substring(this.props.location.pathname.lastIndexOf('/') + 1, this.props.location.pathname.length);\n\n        await fetch((animal.id) ? global.path + '/animals-app/animal/'+ animal.customerId + '/' +  animal.id : global.path + '/animals-app/animal/new/' + customer_Id,{\n        //await fetch((animal.id) ? global.path + '/animal/'+ animal.customerId + '/' +  animal.id : global.path + '/animal/new/' + customer_Id,{\n                method: (animal.id) ? 'PUT' : 'POST',\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(animal),\n            });\n        (animal.id) ? this.props.history.push('/customer/' + animal.customerId) : this.props.history.push('/customer/' + customer_Id);\n    }\n\n    render() {\n        const {animal} = this.state;\n        const title = <h2>{animal.id ? 'Внести изменения' : 'Добавить животное'}</h2>;\n            return <div>\n                <AppNavbar/>\n                <Container>\n                    {title}\n                    <Form onSubmit={this.handleSubmit}>\n                        <FormGroup>\n                            <Label for=\"animalname\">Кличка</Label>\n                            <Input type=\"text\" name=\"animalname\" id=\"animalname\" value={animal.animalname || ''}\n                                   onChange={this.handleChange} autoComplete=\"animalname\"/>\n                        </FormGroup>\n                        <FormGroup>\n                            <Label for=\"dateborn\">Дата рождения</Label>\n                            <Input type=\"text\" name=\"dateborn\" id=\"dateborn\" value={animal.dateborn || ''}\n                                   onChange={this.handleChange} autoComplete=\"dateborn\"/>\n                        </FormGroup>\n                        <div className=\"row\">\n                            <FormGroup className=\"col-md-4 mb-3\">\n                                <Label for=\"typesanimal\">Вид животного</Label>\n                                <select className=\"custom-select\" name=\"typesanimal\" id=\"typesanimal\" onChange={this.handleChange}>\n                                    <option selected type=\"text\" autoComplete=\"typesanimal\">{animal.typesanimal || ''}</option>\n                                    <option value=\"cat\">cat</option>\n                                    <option value=\"dog\">dog</option>\n                                    <option value=\"bird\">bird</option>\n                                    <option value=\"fish\">fish</option>\n                                </select>\n                            </FormGroup>\n                            <FormGroup className=\"col-md-5 mb-3\">\n                                <Label for=\"sex\">Пол животного</Label>\n                                <select className=\"custom-select\" name=\"sex\" id=\"sex\" onChange={this.handleChange} >\n                                    <option selected type=\"text\" autoComplete=\"sex\">{animal.sex || ''}</option>\n                                    <option value=\"male\">male</option>\n                                    <option value=\"female\">female</option>\n                                </select>\n                            </FormGroup>\n                        </div>\n                        <FormGroup>\n                            <Button color=\"primary\" type=\"submit\">Сохранить</Button>{' '}\n                            <Button color=\"secondary\" tag={Link} to={(this.props.match.params.id !== 'new') ? \"/customer/\" + this.props.match.params.id : \"/customer/\"\n                                + this.props.location.pathname.substring(this.props.location.pathname.lastIndexOf('/') + 1, this.props.location.pathname.length)}>Отмена</Button>{' '}\n                        </FormGroup>\n                    </Form>\n                </Container>\n            </div>\n        }\n}\nexport default withRouter(AnimalEdit);","import React, { Component } from 'react';\nimport './App.css';\nimport Home from './Home';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport CountyList from \"./CountyList\";\nimport CustomerList from \"./CustomerList\";\nimport AnimalsList from \"./AnimalsList\";\nimport AnimalEdit from \"./AnimalEdit\";\n\nclass App extends Component {\n    render() {\n        return (\n            <Router>\n                <Switch>\n                    <Route path='/' exact={true} component={Home}/>\n                    <Route path='/city/:id' component={CountyList}/>;\n                    <Route path='/county/:id' component={CustomerList}/>;\n                    <Route path='/customer/:id' component={AnimalsList}/>;\n                    <Route path='/animal/:id' component={AnimalEdit}/>;\n                </Switch>\n            </Router>\n        )\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}